---
format: html
title: Sunbelt 2023 presentation
subtitle: "A quick look into the data"
embed-resources: true
execute: 
  warning: false
---


```{r}
#| echo: false
library(data.table)
library(ggplot2)

simstats <- fread("data/02-dataprep-network-stats.csv.gz")
simstats <- simstats[peak_preval > 1]
```

## Context

- We fitted an ERGM to the school network data.

- Using the fitted model, we simulated 1000 networks.

- For each one of the 1000 networks, we simulated a scale-free, small-world, and degree-sequence network.

- We then sampled 10,000 networks from the 4,000 (with replacement) and simulated outbreaks on an SEIR model with the following parameters:

  - Initial prevalence of 5 individuals.
  - Incubation between `r simstats[, quantile(inc_days, na.rm = TRUE, probs = c(.025, .975))]` 
  - Transmission rate between `r simstats[, quantile(transmission_rate, na.rm = TRUE, probs = c(.025, .975))]`
  - Recovery rate between `r simstats[, quantile(recovery_rate, na.rm = TRUE, probs = c(.025, .975))]`

# Visual inspection

::: {.panel-tabset}

## Igraph

```{r}
# A group of figures showing the outbreak size as 
# a function of the igraph_* variables in the dataset simstats
igraph_vars <- grep("^igraph", names(simstats), value = TRUE)

igraph_vars_long <- melt(
  subset(simstats, select = c("nettype", igraph_vars, "final_preval")),
  id.vars = c("nettype", "final_preval")
  )

ggplot(igraph_vars_long, aes(x = value)) +
  geom_point(aes(y = final_preval, colour = nettype)) +
  facet_wrap(~variable, scales = "free") +
      labs(
        y = "Outbreak size"
      )
```

## ERGM

```{r}
# Build the same graphs for the ergm_* variables
ergm_vars <- grep("^ergm", names(simstats), value = TRUE)

ergm_vars_long <- melt(
  subset(simstats, select = c("nettype", ergm_vars, "final_preval")),
  id.vars = c("nettype", "final_preval")
  )

ggplot(ergm_vars_long, aes(x = value)) +
  geom_point(aes(y = final_preval, colour = nettype)) +
  facet_wrap(~variable, scales = "free") +
      labs(
        y = "Outbreak size"
      )
```

:::

## Model fitting

### Igraph variables

```{r}
#| label: adjusting-igraph
#| cache: true
# Histogram plot of all variables in igraph_vars combined
igraph_vars <- grep("^igraph", names(simstats), value = TRUE)

# Reshape long all igraph_vars 
igraph_vars_long <- melt(simstats[, c("nettype", igraph_vars), with = FALSE], id.vars = "nettype")

# Plot the histogram by variable
ggplot(igraph_vars_long, aes(x = value)) +
  geom_histogram(aes(colour = nettype)) +
  facet_wrap(~variable, scales = "free") 

# simstats[, igraph_avg_closeness/sd(igraph_avg_closeness, na.rm = TRUE)] |> hist()

# Transforming to divide by the standard deviation
simstats[, igraph_avg_closeness := scale(igraph_avg_closeness)]

```

Variables have wild scales. We need to scale them before fitting the model. 

### ERGM variables

```{r}
#| label: ergm-proc-ggplot
#| cache: true
# Same procedure for the ergm_vars
ergm_vars <- grep("^ergm", names(simstats), value = TRUE)

ergm_vars_long <- melt(simstats[, c("nettype", ergm_vars), with = FALSE], id.vars = "nettype")

ggplot(ergm_vars_long, aes(x = value)) +
  geom_histogram() +
  facet_wrap(~variable, scales = "free") 
```

```{r}
# Scaling the variables ergm_edges, ergm_nodematch* and ergm_triangle by log
toscale <- setdiff(ergm_vars, "ergm_isolates")
simstats[,  c(toscale) := lapply(.SD, log), .SDcols = toscale]

# Redoing the previous figure
ergm_vars_long <- melt(
  simstats[, c("nettype", toscale), with = FALSE],
  id.vars = "nettype"
  )

ggplot(ergm_vars_long, aes(x = value)) +
  geom_histogram(aes(colour = nettype)) +
  facet_wrap(~variable, scales = "free") 
```

# Models

::: {.panel-tabset}

```{r}
library(texreg)

vars <- c(ergm_vars, igraph_vars)

# Main parameters
vars <- c(vars, "transmission_rate", "inc_days", "recovery_rate")

# Removing some params
vars <- setdiff(vars, c("ergm_gwdeg.fixed.0.25", "transmission_rate"))

vars <- c(vars, "log(transmission_rate)")

depvars <- c(
  "peak_time", "peak_preval", "rt_0", "dispersion", "final_preval")
```

## Fixed effect only

::: {style="font-size:70%"}

```{r}
#| echo: false
#| label: models-fe
#| output: asis
baseline <- ~ I(factor(nettype))
model_peak_time <- update(baseline, paste(depvars[1], "~."))
model_peak_preval <- update(baseline, paste(depvars[2], "~."))
model_rt <- update(baseline, paste(depvars[3], "~."))
model_dispersion <- update(baseline, paste0("I(log(", depvars[4], "))~."))
model_final_preval <- update(baseline, paste(depvars[5], "~."))

# Run the models
model_peak_preval  <- glm(model_peak_preval, data = simstats)
model_peak_time    <- glm(model_peak_time, data = simstats)
model_rt           <- glm(model_rt, data = simstats)
model_dispersion   <- glm(model_dispersion, data = simstats[is.finite(dispersion)])
model_final_preval <- glm(model_final_preval, data = simstats, family = poisson())

texreg::knitreg(
  list(
    peak_preval = model_peak_preval,
    peak_time = model_peak_time,
    rt = model_rt,
    dispersion = model_dispersion,
    final_preval = model_final_preval
  ), single.row = TRUE)
```

:::

## Adding simple structural terms

::: {style="font-size:70%"}

```{r}
#| echo: false
#| output: asis
#| label: models-simple
terms2add <- "+ ergm_triangle + igraph_density + igraph_avg_path_length + ergm_nodematch.grade"

baseline <- ~ I(factor(nettype))
model_peak_time <- update(baseline, paste(depvars[1], "~. + ", terms2add))
model_peak_preval <- update(baseline, paste(depvars[2], "~.", terms2add))
model_rt <- update(baseline, paste(depvars[3], "~.", terms2add))
model_dispersion <- update(baseline, paste0("I(log(", depvars[4], "))~.", terms2add))
model_final_preval <- update(baseline, paste(depvars[5], "~.", terms2add))


# Run the models
model_peak_preval  <- glm(model_peak_preval, data = simstats)
model_peak_time    <- glm(model_peak_time, data = simstats)
model_rt           <- glm(model_rt, data = simstats)
model_dispersion   <- glm(model_dispersion, data = simstats[is.finite(dispersion)])
model_final_preval <- glm(model_final_preval, data = simstats, family = poisson())

texreg::knitreg(
  list(
    peak_preval = model_peak_preval,
    peak_time = model_peak_time,
    rt = model_rt,
    dispersion = model_dispersion,
    final_preval = model_final_preval
  ), single.row = TRUE)
```

:::

## Full models

```{r}

# Using the update function, run a series of models
# replacing the lhs of the formula with rt, peak_time, and final_preval

depvars <- c(
  "peak_time", "peak_preval", "rt_0", "dispersion", "final_preval")

baseline <- paste("~ I(factor(nettype)) + ", paste(vars, collapse = " + ")) |>
  as.formula()

model_peak_time <- update(baseline, paste(depvars[1], "~."))
model_peak_preval <- update(baseline, paste(depvars[2], "~."))
model_rt <- update(baseline, paste(depvars[3], "~."))
model_dispersion <- update(baseline, paste0("I(log(", depvars[4], "))~."))
model_final_preval <- update(baseline, paste(depvars[5], "~."))
```

```{r}
#| echo: false
# Run the models
model_peak_preval  <- glm(model_peak_preval, data = simstats)
model_peak_time    <- glm(model_peak_time, data = simstats)
model_rt           <- glm(model_rt, data = simstats)
model_dispersion   <- glm(model_dispersion, data = simstats[is.finite(dispersion)])
model_final_preval <- glm(model_final_preval, data = simstats, family = poisson())
```

::: {style="font-size:70%"}

```{r}
#| output: asis
texreg::knitreg(
  list(
    peak_preval = model_peak_preval,
    peak_time = model_peak_time,
    rt = model_rt,
    dispersion = model_dispersion,
    final_preval = model_final_preval
  ), single.row = TRUE)
```

:::

:::